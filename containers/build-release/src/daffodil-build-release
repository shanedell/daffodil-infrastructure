#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

export WIX=/opt/wix/
export LANG=en_US.UTF-8
export CC=clang
export AR=llvm-ar
export SOURCE_DATE_EPOCH=$(git show --no-patch --format=%ct HEAD)

echo "Select a project: "
select PROJECT in daffodil daffodil-sbt daffodil-vscode; do
  if [[ -n "$PROJECT" ]]
  then
    break;
  fi
  echo "invalid choice, select again"
done

echo

read -p "Pre-release label (e.g. rc1 to rc99) or empty for final release: " PRE_RELEASE_LABEL
echo

# determine the release version. If the pre-release label is not empty or all
# whitespace, then append it to the project version. Otherwise we just build
# without a pre-release label. This is potential useful for verifying
# reproducible builds for final releases
PROJECT_VERSION=$(cat VERSION)
if [[ ! $PRE_RELEASE_LABEL =~ ^[\s]*$ ]]
then
  RELEASE_VERSION=$PROJECT_VERSION-$PRE_RELEASE_LABEL
else
  RELEASE_VERSION=$PROJECT_VERSION
fi

echo "==== Building artifacts for $PROJECT $RELEASE_VERSION ===="
RELEASE_DIR=/artifacts/release
DIST_DIR=$RELEASE_DIR/asf-dist/$RELEASE_VERSION
MAVEN_DIR=$RELEASE_DIR/maven-local

mkdir -p ~/.sbt/1.0
echo "ThisBuild / publishTo := Some(MavenCache(\"maven-local\", file(\"$MAVEN_DIR\")))" >> ~/.sbt/1.0/build.sbt

echo "==== Building source artifact ===="
mkdir -p $DIST_DIR/src/
git archive --format=zip --prefix=apache-$PROJECT-$PROJECT_VERSION-src/ HEAD > $DIST_DIR/src/apache-$PROJECT-$PROJECT_VERSION-src.zip

echo "==== Building binary artifacts ===="

case $PROJECT in
  "daffodil")
    mkdir -p $DIST_DIR/bin
    sbt \
      +compile \
      +publish \
      daffodil-cli/Rpm/packageBin \
      daffodil-cli/packageWindowsBin \
      daffodil-cli/Universal/packageBin \
      daffodil-cli/Universal/packageZipTarball

    cp daffodil-cli/target/universal/apache-daffodil-*.tgz $DIST_DIR/bin/
    cp daffodil-cli/target/universal/apache-daffodil-*.zip $DIST_DIR/bin/
    cp daffodil-cli/target/rpm/RPMS/noarch/apache-daffodil-*.rpm $DIST_DIR/bin/
    cp daffodil-cli/target/windows/apache-daffodil-*.exe $DIST_DIR/bin/
    chmod -x $DIST_DIR/bin/*.exe
    ;;

  "daffodil-sbt")
    sbt \
      "^compile" \
      "^publish"
    ;;

  "daffodil-vscode")
    mkdir -p $DIST_DIR/bin/
    yarn package
    cp *.vsix $DIST_DIR/bin/
    ;;

esac

echo "==== Calculating Checksums ===="

for i in $DIST_DIR/*/
do
    pushd $i > /dev/null
    for file in *
    do
       sha512sum --binary $file > $file.sha512
    done
    popd &> /dev/null
done
